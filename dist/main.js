/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lesson14/app.js":
/*!*************************!*\
  !*** ./lesson14/app.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _app_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.js */ "./lesson14/app.js");
/* harmony import */ var _script_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./script.js */ "./lesson14/script.js");













console.log(`HW1: ${_app_js__WEBPACK_IMPORTED_MODULE_0__.randomSale}`);
console.log(`HW2: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.lesson2)()}`);
console.log(`HW3: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.getMaxDigit)(152397595482320)}`);
console.log(`HW4: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.getPairs)(["Олександр", "Ігор", "Олена", "Іра", "Олексій", "Світлана"])}`);
console.log(`HW5: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.replaceBadWords)("Are you man fucking kidding?")}`);
console.log(`HW6: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.getBestStudent)(_app_js__WEBPACK_IMPORTED_MODULE_0__.stud)}`);
console.log(`HW7: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.getMySalary)(_app_js__WEBPACK_IMPORTED_MODULE_0__.latvia)}`);
console.log(`HW8: ${_app_js__WEBPACK_IMPORTED_MODULE_0__.studentsInfo.getInfo()}`);
console.log(`HW9: ${(0,_app_js__WEBPACK_IMPORTED_MODULE_0__.generateBlocks)()}`);
console.log(`HW11: ${(0,_script_js__WEBPACK_IMPORTED_MODULE_1__.getRandomChinese)(6)}`);

/***/ }),

/***/ "./lesson14/script.js":
/*!****************************!*\
  !*** ./lesson14/script.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Student),
/* harmony export */   "generate": () => (/* binding */ generate),
/* harmony export */   "generateBlocks": () => (/* binding */ generateBlocks),
/* harmony export */   "getBestStudent": () => (/* binding */ getBestStudent),
/* harmony export */   "getMaxDigit": () => (/* binding */ getMaxDigit),
/* harmony export */   "getMySalary": () => (/* binding */ getMySalary),
/* harmony export */   "getPairs": () => (/* binding */ getPairs),
/* harmony export */   "getRandomChinese": () => (/* binding */ getRandomChinese),
/* harmony export */   "latvia": () => (/* binding */ latvia),
/* harmony export */   "lesson2": () => (/* binding */ lesson2),
/* harmony export */   "listen": () => (/* binding */ listen),
/* harmony export */   "litva": () => (/* binding */ litva),
/* harmony export */   "play": () => (/* binding */ play),
/* harmony export */   "randomSale": () => (/* binding */ randomSale),
/* harmony export */   "removeActiveClass": () => (/* binding */ removeActiveClass),
/* harmony export */   "replaceBadWords": () => (/* binding */ replaceBadWords),
/* harmony export */   "stud": () => (/* binding */ stud),
/* harmony export */   "studentsInfo": () => (/* binding */ studentsInfo),
/* harmony export */   "ukraine": () => (/* binding */ ukraine)
/* harmony export */ });
let chocolate = 15.678;
let fruits = 123.965;
let sweet = 90.2345;
let randomSale = (Math.random() * 100).toFixed();

let numN = 10;
let numM = 15;
let sum = 0;
function lesson2(numN, numM) {
  for (let i = numN; i <= numM; i++) {
    if (numM > numN) {
      sum += i;
    } else {
      if (i % 2 === 0) continue;
      sum += i;
    }
  }
  console.log(`Sum of numbers = ${sum}`);
}
const getMaxDigit = function (number) {
  let str = String(number).split('').map(n => +n).sort(function sor(a, b) {
    if (a >= b) return -1;
    if (a <= b) return 1;
    return 0;
  });
  return str.at(0);
};
const students = ["Олександр", "Ігор", "Олена", "Іра", "Олексій", "Світлана"];
const marks = [4, 5, 5, 3, 4, 5];
function getPairs(students) {
  const coupleStudents = students.map(x => x);
  const male = [];
  const female = [];
  for (let coupleName of coupleStudents) {
    if (coupleName[coupleName.length - 1] === 'а') {
      female.push(coupleName);
    } else {
      male.push(coupleName);
    }
  }
  let coupleResult = [];
  for (let i = 0; i < male.length; i++) {
    coupleResult[i] = [male[i], female[i]];
  }
  return coupleResult;
}
function replaceBadWords(string) {
  let arrOfBadWords = string.split(' ');
  let badWords = /(shit|fuck)/gi;
  let str = arrOfBadWords.map(n => n.replaceAll(badWords, '****')).join(' ');
  return str;
}
const stud = [{
  name: "Tanya",
  course: 3,
  subjects: {
    math: [4, 4, 3, 4],
    algorithms: [3, 3, 3, 4, 4, 4],
    data_science: [5, 5, 3, 4]
  }
}, {
  name: "Victor",
  course: 4,
  subjects: {
    physics: [5, 5, 5, 3],
    economics: [2, 3, 3, 3, 3, 5],
    geometry: [5, 5, 2, 3, 5]
  }
}, {
  name: "Anton",
  course: 2,
  subjects: {
    statistics: [4, 5, 5, 5, 5, 3, 4, 3, 4, 5],
    english: [5, 3],
    cosmology: [5, 5, 5, 5]
  }
}];
const getBestStudent = students => {
  const student = students;
  const modal = students.map(n => Object.entries(n));
  let res = [];
  for (let item of student) {
    const numOfAverageMark = Object.values(item.subjects).join('').replace(/,/g, '').split('').map(num => +num);
    let AverageMark = +(numOfAverageMark.reduce((acc, item) => acc + item) / numOfAverageMark.length).toFixed(2);
    res.push(AverageMark);
  }
  let result = [];
  modal.forEach(entry => {
    let key = entry[0][1];
    result.push(key);
  });
  let coupleResult = [];
  for (let i = 0; i < result.length; i++) {
    coupleResult[i] = [result[i], res[i]];
  }
  let best = coupleResult.sort((a, b) => {
    if (a > b) return 1;
    if (a < b) return -1;
    return 0;
  });
  return best[0][0];
};
const ukraine = {
  tax: 0.195,
  middleSalary: 1789,
  vacancies: 11476
};
const latvia = {
  tax: 0.25,
  middleSalary: 1586,
  vacancies: 3921
};
const litva = {
  tax: 0.15,
  middleSalary: 1509,
  vacancies: 1114
};
function getMySalary(country) {
  let res = {};
  res.salary = Math.floor(Math.random() * (2000 - 1500) + 1500);
  res.taxes = res.salary * country.tax;
  res.profit = res.salary - res.taxes;
  return res;
}
class Student {
  constructor(university, course, fullName) {
    this.fullnameStudent = fullName;
    this.courseofUniversity = course;
    this.universityOfStudent = university;
    this._marks = [5, 4, 5, 4];
    this.marksOfStudent = [...this._marks];
    this.dismiss = false;
  }
  getInfo() {
    return `Студент ${this.courseofUniversity}-го курсу ${this.universityOfStudent}, ${this.fullnameStudent}`;
  }
  getAverageMark() {
    if (!this.dismiss) {
      return (this._marks.reduce((acc, item) => acc + item) / this._marks.length).toFixed(1);
    }
    return null;
  }
  set marks(mark) {
    if (!this.dismiss) {
      return this._marks.push(mark);
    } else {
      return this._marks = [];
    }
  }
  get marks() {
    return this._marks;
  }
  dismissed() {
    this.dismiss = true;
    this._marks = null;
  }
  recover() {
    this.dismiss = false;
    this._marks = this.marksOfStudent;
  }
}
let studentsInfo = new Student(1, 'Вищої Школи Психотерапії м.Одеса', 'Остап Родоманський Бендер');
const generate = document.body.onload = generateBlocks();
function generateBlocks() {
  const wrapper = document.createElement('div');
  wrapper.classList.add('#wrap');
  wrap.style.cssText = `width: 250px;
            height: 250px;
            margin: 0 auto;
            display: flex;
            flex-wrap: wrap;`;
  wrapper.innerHTML = '';
  for (let j = 0; j < 25; j++) {
    let block = document.createElement('div');
    block.classList.add('block');
    wrapper.append(block);
  }
}
window.addEventListener('keydown', listen);
function listen(event) {
  const audio = document.querySelector(`audio[data-key="${event.code}"]`);
  const key = document.querySelector(`.play[data-key="${event.code}"]`);
  removeActiveClass();
  if (!audio) return;
  audio.play();
  key.classList.add('active');
}
const play = document.querySelectorAll('.play');
function removeActiveClass() {
  play.forEach(panel => {
    panel.classList.remove('active');
  });
}
async function getRandomChinese(length) {
  let sign = (Date.now() + '').split('').slice(-5).join('');
  const res = String.fromCharCode(sign);
  let result = '';
  let i = length;
  while (i > 1) {
    const res = String.fromCharCode(sign);
    result += res;
    i--;
  }
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(result += res);
    }, i * 500);
  }).then(console.log);
}

// console.log(getRandomChinese(5))

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./lesson14/app.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,